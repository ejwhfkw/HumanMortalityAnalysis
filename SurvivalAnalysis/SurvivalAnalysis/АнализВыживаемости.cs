using System;
using System.Collections.Generic;
using System.Linq;

namespace SurvivalAnalysis
{
    public class АнализВыживаемости
    {
        public List<int> СписокГодов { get; private set; }
        public List<Территория> СписокТерриторий { get; private set; }
        public List<КатегорияПоселения> СписокКатегорийПоселения { get; private set; }
        public List<Пол> СписокПолов { get; private set; }
        public List<ПричинаСмерти> СписокПричинСмерти { get; private set; }
        public List<int> СписокОднолетнихВозрастныхГрупп { get; private set; }
        public List<int> СписокПятилетнихВозрастныхГрупп { get; private set; }
        public List<string> СписокПредположенийДляИнтерполяции { get; private set; }

        private List<ЧисленностьНаселенияПоОднолетнимВозрастнымГруппам> _списокСДаннымиОЧисленностиНаселенияПоОднолетнимВозрастнымГруппам;
        private List<СмертностьПоОднолетнимВозрастнымГруппам> _списокСДаннымиОСмертностиПоОднолетнимВозрастнымГруппам;
        private List<ЧисленностьНаселенияПоПятилетнимВозрастнымГруппам> _списокСДаннымиОЧисленностиНаселенияПоПятилетнимВозрастнымГруппам;
        private List<СмертностьПоПятилетнимВозрастнымГруппам> _списокСДаннымиОСмертностиПоПятилетнимВозрастнымГруппам;

        private const int ПредельнаяВозрастнаяГруппа = 101;

        public АнализВыживаемости(string[] данныеОЧисленностиНаселенияПоОднолетнимВозрастнымГруппам,
                                  string[] данныеОСмертностиПоОднолетнимВозрастнымГруппам,
                                  string[] данныеОЧисленностиНаселенияПоПятилетнимВозрастнымГруппам,
                                  string[] данныеОСмертностиПоПятилетнимВозрастнымГруппам,
                                  string[] переченьТерриторий,
                                  string[] переченьПричинСмерти)
        {
            ОбработатьВходныеДанные(данныеОЧисленностиНаселенияПоОднолетнимВозрастнымГруппам,
                                    данныеОСмертностиПоОднолетнимВозрастнымГруппам,
                                    данныеОЧисленностиНаселенияПоПятилетнимВозрастнымГруппам,
                                    данныеОСмертностиПоПятилетнимВозрастнымГруппам,
                                    переченьТерриторий,
                                    переченьПричинСмерти);
            ЗаполнитьСписокГодов();
            ЗаполнитьСписокКатегорийПоселения();
            ЗаполнитьСписокПолов();
            ЗаполнитьСпискиВозрастныхГрупп();
            ЗаполнитьСписокПредположенийДляИнтерполяции();
        }

        public bool ВычислениеДанныхВозможно(EТипВозрастныхГрупп типВозрастныхГрупп, int год, Территория территория, КатегорияПоселения категорияПоселения, Пол пол, ПричинаСмерти причинаСмерти)
        {
            ЧисленностьНаселения численностьНаселения = ПолучитьДанныеОЧисленностиНаселения(типВозрастныхГрупп, год, территория, категорияПоселения, пол);
            Смертность смертность = ПолучитьДанныеОСмертности(типВозрастныхГрупп, год, территория, категорияПоселения, пол, причинаСмерти);

            return численностьНаселения != null && смертность != null;
        }

        public List<СтрокаТаблицыСмертности> ВычислитьДанныеДляТаблицыСмертности(EТипВозрастныхГрупп типВозрастныхГрупп,
                                                                                 int год,
                                                                                 Территория территория,
                                                                                 КатегорияПоселения категорияПоселения,
                                                                                 Пол пол,
                                                                                 ПричинаСмерти причинаСмерти,
                                                                                 string предположениеДляИнтерполяции)
        {
            // Выполняем поиск входных данных по входным параметрам
            ЧисленностьНаселения численностьНаселения = ПолучитьДанныеОЧисленностиНаселения(типВозрастныхГрупп, год, территория, категорияПоселения, пол);
            Смертность смертность = ПолучитьДанныеОСмертности(типВозрастныхГрупп, год, территория, категорияПоселения, пол, причинаСмерти);

            // При отсутствии данных не возвращаем ничего
            if (смертность == null || численностьНаселения == null)
                return null;

            // Представляем часть входных данных в удобном для расчетов формате
            List<КоэффициентСмертностиДляВозрастнойГруппы> списокКоэффициентовСмертностиПоВозрастнымГруппам = смертность.СоздатьСписокКоэффициентовСмертностиПоВозрастнымГруппам();
            List<СреднегодоваяЧисленностьНаселенияДляВозрастнойГруппы> списокЧисленностиНаселенияПоВозрастнымГруппам = численностьНаселения.СоздатьСписокСреднегодовойЧисленностиНаселенияПоВозрастнымГруппам();

            if (списокКоэффициентовСмертностиПоВозрастнымГруппам.Count != списокЧисленностиНаселенияПоВозрастнымГруппам.Count)
                return null;

            // Получаем список возрастных групп, для которых имеются входные данные
            List<int> списокДоступныхВозрастныхГрупп = списокКоэффициентовСмертностиПоВозрастнымГруппам.Select(o => o.x).ToList();

            // Выполняем расчет промежуточных величин
            var списокСЧисломУмершихПоВозрастнымГруппам = new List<ЧислоУмершихДляВозрастнойГруппы>();
            foreach (int x in списокДоступныхВозрастныхГрупп)
            {
                double mx = списокКоэффициентовСмертностиПоВозрастнымГруппам.First(o => o.x == x).Value;
                int Lx = списокЧисленностиНаселенияПоВозрастнымГруппам.First(o => o.x == x).Value;
                списокСЧисломУмершихПоВозрастнымГруппам.Add(new ЧислоУмершихДляВозрастнойГруппы(x, mx, Lx));
            }
            списокСЧисломУмершихПоВозрастнымГруппам.Add(new ЧислоУмершихДляВозрастнойГруппы(ПредельнаяВозрастнаяГруппа, 1, 0));

            var списокСЧисломЖивыхПоВозрастнымГруппам = new List<ЧислоЖивыхДляВозрастнойГруппы>();
            списокСЧисломЖивыхПоВозрастнымГруппам.Add(new ЧислоЖивыхДляВозрастнойГруппы(ПредельнаяВозрастнаяГруппа, 0, 0));
            for (int i = списокДоступныхВозрастныхГрупп.Count - 1; i >= 0; i--)
            {
                int x = списокДоступныхВозрастныхГрупп[i];
                double lx_next = списокСЧисломЖивыхПоВозрастнымГруппам.Last().lx;
                double dx = списокСЧисломУмершихПоВозрастнымГруппам.First(o => o.x == x).dx;
                списокСЧисломЖивыхПоВозрастнымГруппам.Add(new ЧислоЖивыхДляВозрастнойГруппы(x, lx_next, dx));
            }

            // Выполняем сортировку списка с числом живых по возрастанию возрастной группы
            списокСЧисломЖивыхПоВозрастнымГруппам = списокСЧисломЖивыхПоВозрастнымГруппам.OrderBy(o => o.x).ToList();

            if (типВозрастныхГрупп == EТипВозрастныхГрупп.ОднолетниеИнтерполированные)
                списокСЧисломЖивыхПоВозрастнымГруппам = ВыполнитьИнтерполяциюЧислаЖивыхПоВозрастнымГруппам(списокСЧисломЖивыхПоВозрастнымГруппам, предположениеДляИнтерполяции);

            // Если для входных параметров отсутствуют данные о смертности (или смертность нулевая), то дальнейшие вычисления невозможны
            bool вычислениеДанныхВозможно = списокСЧисломЖивыхПоВозрастнымГруппам != null && списокСЧисломЖивыхПоВозрастнымГруппам.First().lx != 0;
            if (!вычислениеДанныхВозможно)
                return null;

            // Выполняем нормализацию числа живых по возрастным группам
            List<ЧислоЖивыхДляВозрастнойГруппы> списокСНормализованнымЧисломЖивыхПоВозрастнымГруппам = списокСЧисломЖивыхПоВозрастнымГруппам.Select(item => (ЧислоЖивыхДляВозрастнойГруппы)item.Clone()).ToList();
            НормализоватьЧислоЖивыхПоВозрастнымГруппам(списокСНормализованнымЧисломЖивыхПоВозрастнымГруппам);

            // С этого момента переходим к расчетам промежуточных величин с учетом предельной возрастной группы
            списокДоступныхВозрастныхГрупп = списокСНормализованнымЧисломЖивыхПоВозрастнымГруппам.Select(o => o.x).ToList();

            var списокССуммарнымиСреднимиПрожитымиГодамиЧленовСовокупности = new List<СуммарноеСреднееЧислоЛетПрожитоеЧленамиСовокупности>();
            for (var i = 0; i < списокДоступныхВозрастныхГрупп.Count - 1; i++)
            {
                int x = списокДоступныхВозрастныхГрупп[i];
                int x_next = списокДоступныхВозрастныхГрупп[i + 1];
                double lx = списокСНормализованнымЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x).lx;
                double lx_next = списокСНормализованнымЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x_next).lx;
                списокССуммарнымиСреднимиПрожитымиГодамиЧленовСовокупности.Add(new СуммарноеСреднееЧислоЛетПрожитоеЧленамиСовокупности(x, x_next, lx, lx_next));
            }

            var списокСОбщимиСреднимиГодамиКДожитию = new List<ОбщееСреднееЧислоЛетКДожитию>();
            foreach (int x in списокДоступныхВозрастныхГрупп)
            {
                double Tx = списокССуммарнымиСреднимиПрожитымиГодамиЧленовСовокупности.FindAll(o => o.x >= x).Select(o => o.Lx).Sum();
                списокСОбщимиСреднимиГодамиКДожитию.Add(new ОбщееСреднееЧислоЛетКДожитию(x, Tx));
            }

            var таблицаСмертности = new List<СтрокаТаблицыСмертности>();
            for (var i = 0; i < списокДоступныхВозрастныхГрупп.Count - 1; i++)
            {
                int x = списокДоступныхВозрастныхГрупп[i];
                int x_next = списокДоступныхВозрастныхГрупп[i + 1];
                double lx_original = списокСЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x).lx;
                double lx = списокСНормализованнымЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x).lx;
                double lx_next = списокСНормализованнымЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x_next).lx;
                double Lx = списокССуммарнымиСреднимиПрожитымиГодамиЧленовСовокупности.First(o => o.x == x).Lx;
                double Tx = списокСОбщимиСреднимиГодамиКДожитию.First(o => o.x == x).Tx;
                таблицаСмертности.Add(new СтрокаТаблицыСмертности(x, lx_original, lx, lx_next, Lx, Tx));
            }
            таблицаСмертности.Add(new СтрокаТаблицыСмертности(ПредельнаяВозрастнаяГруппа, 0, 0, 0, 0, 0));

            return таблицаСмертности;
        }

        public List<СтрокаТаблицыСОжидаемойПродолжительностьюПредстоящейЖизни> ВычислитьДанныеДляТаблицыСОжидаемойПродолжительностьюПредстоящейЖизни(EТипВозрастныхГрупп типВозрастныхГрупп,
                                                                                                                                                     int год,
                                                                                                                                                     Территория территория,
                                                                                                                                                     КатегорияПоселения категорияПоселения,
                                                                                                                                                     Пол пол,
                                                                                                                                                     int возрастнаяГруппа)
        {
            // Выполняем вычисление данных для таблицы смертности для всех причин смерти
            var списокТаблицСмертностиСПричинамиСмерти = new List<(ПричинаСмерти причинаСмерти, List<СтрокаТаблицыСмертности> таблицаСмертности)>();
            foreach (ПричинаСмерти причинаСмерти in СписокПричинСмерти)
            {
                if (ВычислениеДанныхВозможно(типВозрастныхГрупп, год, территория, категорияПоселения, пол, причинаСмерти))
                {
                    List<СтрокаТаблицыСмертности> таблицаСмертности = ВычислитьДанныеДляТаблицыСмертности(типВозрастныхГрупп, год, территория, категорияПоселения, пол, причинаСмерти, null);
                    списокТаблицСмертностиСПричинамиСмерти.Add((причинаСмерти, таблицаСмертности));
                }
            }

            // Из полученных выше таблиц смертности вычленяем строки для конкретной возрастной группы и на их основе создаем новую таблицу
            return списокТаблицСмертностиСПричинамиСмерти
                   .Where(таблицаСмертностиСПричинойСмерти => таблицаСмертностиСПричинойСмерти.таблицаСмертности != null)
                   .Select(таблицаСмертностиСПричинойСмерти => {
                       СтрокаТаблицыСмертности строкаТаблицыСмертности = таблицаСмертностиСПричинойСмерти.таблицаСмертности.Find(строка => строка.x == возрастнаяГруппа);
                       return new СтрокаТаблицыСОжидаемойПродолжительностьюПредстоящейЖизни(таблицаСмертностиСПричинойСмерти.причинаСмерти.Наименование, строкаТаблицыСмертности.qx, строкаТаблицыСмертности.ex);
                   })
                   .OrderBy(o => o.ex)
                   .ToList();
        }

        public List<ФункциональныеХарактеристикиПродолжительностиЖизни> ВычислитьФункциональныеХарактеристикиПродолжительностиЖизниНоворожденного(EТипВозрастныхГрупп типВозрастныхГрупп,
                                                                                                                                                  int год,
                                                                                                                                                  Территория территория,
                                                                                                                                                  КатегорияПоселения категорияПоселения,
                                                                                                                                                  Пол пол,
                                                                                                                                                  ПричинаСмерти причинаСмерти)
        {
            List<ФункциональныеХарактеристикиПродолжительностиЖизни> списокФункциональныхХарактеристикПродолжительностиЖизниНоворожденного =
                ВычислитьФункциональныеХарактеристикиОстаточнойПродолжительностиЖизни(типВозрастныхГрупп, год, территория, категорияПоселения, пол, причинаСмерти, 0);

            return списокФункциональныхХарактеристикПродолжительностиЖизниНоворожденного;
        }

        public List<ФункциональныеХарактеристикиПродолжительностиЖизни> ВычислитьФункциональныеХарактеристикиОстаточнойПродолжительностиЖизни(EТипВозрастныхГрупп типВозрастныхГрупп,
                                                                                                                                              int год,
                                                                                                                                              Территория территория,
                                                                                                                                              КатегорияПоселения категорияПоселения,
                                                                                                                                              Пол пол,
                                                                                                                                              ПричинаСмерти причинаСмерти,
                                                                                                                                              int возрастнаяГруппа)
        {
            ЧисленностьНаселения численностьНаселения = ПолучитьДанныеОЧисленностиНаселения(типВозрастныхГрупп, год, территория, категорияПоселения, пол);
            Смертность смертность = ПолучитьДанныеОСмертности(типВозрастныхГрупп, год, территория, категорияПоселения, пол, причинаСмерти);

            if (смертность == null || численностьНаселения == null)
                return null;

            List<КоэффициентСмертностиДляВозрастнойГруппы> списокКоэффициентовСмертностиПоВозрастнымГруппам = смертность.СоздатьСписокКоэффициентовСмертностиПоВозрастнымГруппам();
            List<СреднегодоваяЧисленностьНаселенияДляВозрастнойГруппы> списокЧисленностиНаселенияПоВозрастнымГруппам = численностьНаселения.СоздатьСписокСреднегодовойЧисленностиНаселенияПоВозрастнымГруппам();

            if (списокКоэффициентовСмертностиПоВозрастнымГруппам.Count != списокЧисленностиНаселенияПоВозрастнымГруппам.Count)
                return null;

            List<int> списокДоступныхВозрастныхГрупп = списокКоэффициентовСмертностиПоВозрастнымГруппам
                                                       .FindAll(o => o.x >= возрастнаяГруппа)
                                                       .Select(o => o.x)
                                                       .ToList();

            var списокСЧисломУмершихПоВозрастнымГруппам = new List<ЧислоУмершихДляВозрастнойГруппы>();
            foreach (int x in списокДоступныхВозрастныхГрупп)
            {
                double mx = списокКоэффициентовСмертностиПоВозрастнымГруппам.First(o => o.x == x).Value;
                int Lx = списокЧисленностиНаселенияПоВозрастнымГруппам.First(o => o.x == x).Value;
                списокСЧисломУмершихПоВозрастнымГруппам.Add(new ЧислоУмершихДляВозрастнойГруппы(x, mx, Lx));
            }
            списокСЧисломУмершихПоВозрастнымГруппам.Add(new ЧислоУмершихДляВозрастнойГруппы(ПредельнаяВозрастнаяГруппа, 1, 0));

            var списокСЧисломЖивыхПоВозрастнымГруппам = new List<ЧислоЖивыхДляВозрастнойГруппы>();
            списокСЧисломЖивыхПоВозрастнымГруппам.Add(new ЧислоЖивыхДляВозрастнойГруппы(ПредельнаяВозрастнаяГруппа, 0, 0));
            for (int i = списокДоступныхВозрастныхГрупп.Count - 1; i >= 0; i--)
            {
                int x = списокДоступныхВозрастныхГрупп[i];
                double lx_next = списокСЧисломЖивыхПоВозрастнымГруппам.Last().lx;
                double dx = списокСЧисломУмершихПоВозрастнымГруппам.First(o => o.x == x).dx;
                списокСЧисломЖивыхПоВозрастнымГруппам.Add(new ЧислоЖивыхДляВозрастнойГруппы(x, lx_next, dx));
            }

            списокДоступныхВозрастныхГрупп.Add(ПредельнаяВозрастнаяГруппа);

            var списокФункциональныхХарактеристикОстаточнойПродолжительностиЖизни = new List<ФункциональныеХарактеристикиПродолжительностиЖизни>();
            double lx = списокСЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == возрастнаяГруппа).lx;
            foreach (int x in списокДоступныхВозрастныхГрупп)
            {
                double lxt = списокСЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x).lx;
                double dxt = списокСЧисломУмершихПоВозрастнымГруппам.First(o => o.x == x).dx;
                списокФункциональныхХарактеристикОстаточнойПродолжительностиЖизни.Add(new ФункциональныеХарактеристикиПродолжительностиЖизни(x, lxt, lx, dxt));
            }

            return списокФункциональныхХарактеристикОстаточнойПродолжительностиЖизни;
        }

        public РезультатыВычислительногоЭксперимента СравнитьОпытнуюТаблицуСмертностиСЭталонной()
        {
            int год = 2013;
            Территория территория = СписокТерриторий.First(o => o.Наименование == "Российская Федерация до 17 марта 2014");
            КатегорияПоселения категорияПоселения = СписокКатегорийПоселения.First(o => o.Наименование == "Все население");
            Пол пол = СписокПолов.First(o => o.Наименование == "Мужчины");
            ПричинаСмерти причинаСмерти = СписокПричинСмерти.First(o => o.Наименование == "Все причины смерти");

            // Таблица смертности для однолетних возрастных групп
            var построеннаяТаблицаСмертности = ВычислитьДанныеДляТаблицыСмертности(EТипВозрастныхГрупп.Однолетние, год, территория, категорияПоселения, пол, причинаСмерти, string.Empty);
            var эталоннаяТаблицаСмертности = new List<ЧислоЖивыхДляВозрастнойГруппы>
            {
                new ЧислоЖивыхДляВозрастнойГруппы(0, 100000),
                new ЧислоЖивыхДляВозрастнойГруппы(1, 99094),
                new ЧислоЖивыхДляВозрастнойГруппы(2, 99018),
                new ЧислоЖивыхДляВозрастнойГруппы(3, 98972),
                new ЧислоЖивыхДляВозрастнойГруппы(4, 98933),
                new ЧислоЖивыхДляВозрастнойГруппы(5, 98902),
                new ЧислоЖивыхДляВозрастнойГруппы(6, 98872),
                new ЧислоЖивыхДляВозрастнойГруппы(7, 98844),
                new ЧислоЖивыхДляВозрастнойГруппы(8, 98818),
                new ЧислоЖивыхДляВозрастнойГруппы(9, 98792),
                new ЧислоЖивыхДляВозрастнойГруппы(10, 98759),
                new ЧислоЖивыхДляВозрастнойГруппы(11, 98730),
                new ЧислоЖивыхДляВозрастнойГруппы(12, 98698),
                new ЧислоЖивыхДляВозрастнойГруппы(13, 98670),
                new ЧислоЖивыхДляВозрастнойГруппы(14, 98636),
                new ЧислоЖивыхДляВозрастнойГруппы(15, 98582),
                new ЧислоЖивыхДляВозрастнойГруппы(16, 98519),
                new ЧислоЖивыхДляВозрастнойГруппы(17, 98438),
                new ЧислоЖивыхДляВозрастнойГруппы(18, 98336),
                new ЧислоЖивыхДляВозрастнойГруппы(19, 98203),
                new ЧислоЖивыхДляВозрастнойГруппы(20, 98056),
                new ЧислоЖивыхДляВозрастнойГруппы(21, 97876),
                new ЧислоЖивыхДляВозрастнойГруппы(22, 97677),
                new ЧислоЖивыхДляВозрастнойГруппы(23, 97461),
                new ЧислоЖивыхДляВозрастнойГруппы(24, 97233),
                new ЧислоЖивыхДляВозрастнойГруппы(25, 96967),
                new ЧислоЖивыхДляВозрастнойГруппы(26, 96671),
                new ЧислоЖивыхДляВозрастнойГруппы(27, 96350),
                new ЧислоЖивыхДляВозрастнойГруппы(28, 96012),
                new ЧислоЖивыхДляВозрастнойГруппы(29, 95643),
                new ЧислоЖивыхДляВозрастнойГруппы(30, 95219),
                new ЧислоЖивыхДляВозрастнойГруппы(31, 94732),
                new ЧислоЖивыхДляВозрастнойГруппы(32, 94221),
                new ЧислоЖивыхДляВозрастнойГруппы(33, 93675),
                new ЧислоЖивыхДляВозрастнойГруппы(34, 93083),
                new ЧислоЖивыхДляВозрастнойГруппы(35, 92436),
                new ЧислоЖивыхДляВозрастнойГруппы(36, 91770),
                new ЧислоЖивыхДляВозрастнойГруппы(37, 91098),
                new ЧислоЖивыхДляВозрастнойГруппы(38, 90413),
                new ЧислоЖивыхДляВозрастнойГруппы(39, 89729),
                new ЧислоЖивыхДляВозрастнойГруппы(40, 89023),
                new ЧислоЖивыхДляВозрастнойГруппы(41, 88307),
                new ЧислоЖивыхДляВозрастнойГруппы(42, 87577),
                new ЧислоЖивыхДляВозрастнойГруппы(43, 86859),
                new ЧислоЖивыхДляВозрастнойГруппы(44, 86112),
                new ЧислоЖивыхДляВозрастнойГруппы(45, 85327),
                new ЧислоЖивыхДляВозрастнойГруппы(46, 84484),
                new ЧислоЖивыхДляВозрастнойГруппы(47, 83594),
                new ЧислоЖивыхДляВозрастнойГруппы(48, 82680),
                new ЧислоЖивыхДляВозрастнойГруппы(49, 81730),
                new ЧислоЖивыхДляВозрастнойГруппы(50, 80693),
                new ЧислоЖивыхДляВозрастнойГруппы(51, 79597),
                new ЧислоЖивыхДляВозрастнойГруппы(52, 78443),
                new ЧислоЖивыхДляВозрастнойГруппы(53, 77275),
                new ЧислоЖивыхДляВозрастнойГруппы(54, 76035),
                new ЧислоЖивыхДляВозрастнойГруппы(55, 74679),
                new ЧислоЖивыхДляВозрастнойГруппы(56, 73253),
                new ЧислоЖивыхДляВозрастнойГруппы(57, 71765),
                new ЧислоЖивыхДляВозрастнойГруппы(58, 70186),
                new ЧислоЖивыхДляВозрастнойГруппы(59, 68530),
                new ЧислоЖивыхДляВозрастнойГруппы(60, 66827),
                new ЧислоЖивыхДляВозрастнойГруппы(61, 64915),
                new ЧислоЖивыхДляВозрастнойГруппы(62, 62898),
                new ЧислоЖивыхДляВозрастнойГруппы(63, 60942),
                new ЧислоЖивыхДляВозрастнойГруппы(64, 58945),
                new ЧислоЖивыхДляВозрастнойГруппы(65, 56724),
                new ЧислоЖивыхДляВозрастнойГруппы(66, 54777),
                new ЧислоЖивыхДляВозрастнойГруппы(67, 52404),
                new ЧислоЖивыхДляВозрастнойГруппы(68, 50365),
                new ЧислоЖивыхДляВозрастнойГруппы(69, 48203),
                new ЧислоЖивыхДляВозрастнойГруппы(70, 45961),
                new ЧислоЖивыхДляВозрастнойГруппы(71, 43892),
                new ЧислоЖивыхДляВозрастнойГруппы(72, 41273),
                new ЧислоЖивыхДляВозрастнойГруппы(73, 38930),
                new ЧислоЖивыхДляВозрастнойГруппы(74, 36517),
                new ЧислоЖивыхДляВозрастнойГруппы(75, 33940),
                new ЧислоЖивыхДляВозрастнойГруппы(76, 31560),
                new ЧислоЖивыхДляВозрастнойГруппы(77, 29115),
                new ЧислоЖивыхДляВозрастнойГруппы(78, 26705),
                new ЧислоЖивыхДляВозрастнойГруппы(79, 24326),
                new ЧислоЖивыхДляВозрастнойГруппы(80, 22068),
                new ЧислоЖивыхДляВозрастнойГруппы(81, 19883),
                new ЧислоЖивыхДляВозрастнойГруппы(82, 17728),
                new ЧислоЖивыхДляВозрастнойГруппы(83, 15699),
                new ЧислоЖивыхДляВозрастнойГруппы(84, 13731),
                new ЧислоЖивыхДляВозрастнойГруппы(85, 11937),
                new ЧислоЖивыхДляВозрастнойГруппы(86, 10225),
                new ЧислоЖивыхДляВозрастнойГруппы(87, 8666),
                new ЧислоЖивыхДляВозрастнойГруппы(88, 7250),
                new ЧислоЖивыхДляВозрастнойГруппы(89, 5974),
                new ЧислоЖивыхДляВозрастнойГруппы(90, 4818),
                new ЧислоЖивыхДляВозрастнойГруппы(91, 3906),
                new ЧислоЖивыхДляВозрастнойГруппы(92, 3005),
                new ЧислоЖивыхДляВозрастнойГруппы(93, 2287),
                new ЧислоЖивыхДляВозрастнойГруппы(94, 1699),
                new ЧислоЖивыхДляВозрастнойГруппы(95, 1229),
                new ЧислоЖивыхДляВозрастнойГруппы(96, 895),
                new ЧислоЖивыхДляВозрастнойГруппы(97, 639),
                new ЧислоЖивыхДляВозрастнойГруппы(98, 446),
                new ЧислоЖивыхДляВозрастнойГруппы(99, 305),
                new ЧислоЖивыхДляВозрастнойГруппы(100, 204),
                new ЧислоЖивыхДляВозрастнойГруппы(101, 133)
            };

            List<int> списокДоступныхВозрастныхГрупп = построеннаяТаблицаСмертности.Select(o => o.x).ToList();

            var списокСЧисломЖивыхПоВозрастнымГруппами = new List<ЧислоЖивыхДляВозрастнойГруппы_СравнениеОпытнойТаблицыСмертностиСЭталонной>();
            foreach (var x in списокДоступныхВозрастныхГрупп)
            {
                double lx_calculated = построеннаяТаблицаСмертности.First(o => o.x == x).lx;
                double lx_reference = эталоннаяТаблицаСмертности.First(o => o.x == x).lx;
                списокСЧисломЖивыхПоВозрастнымГруппами.Add(new ЧислоЖивыхДляВозрастнойГруппы_СравнениеОпытнойТаблицыСмертностиСЭталонной(x, lx_calculated, lx_reference));
            }

            var результаты = string.Empty;
            double sum = 0;
            // Школьники
            for (var x = 6; x <= 17; x++)
            {
                double lx_calculated = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx_calculated;
                double lx_reference = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx_reference;

                sum += Math.Abs(lx_calculated - lx_reference);
            }
            результаты += "Возрастная группа 6-17 лет\r\n";
            результаты += $"Сумма расстояний между точками: {sum}\r\n";

            sum = 0;
            // Взрослые
            for (var x = 30; x <= 55; x++)
            {
                double lx_calculated = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx_calculated;
                double lx_reference = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx_reference;

                sum += Math.Abs(lx_calculated - lx_reference);
            }
            результаты += "Возрастная группа 30-55 лет\r\n";
            результаты += $"Сумма расстояний между точками: {sum}\r\n";

            sum = 0;
            // Пожилые
            for (var x = 56; x <= 80; x++)
            {
                double lx_calculated = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx_calculated;
                double lx_reference = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx_reference;

                sum += Math.Abs(lx_calculated - lx_reference);
            }
            результаты += "Возрастная группа 56-80 лет\r\n";
            результаты += $"Сумма расстояний между точками: {sum}\r\n";

            return new РезультатыВычислительногоЭксперимента(списокСЧисломЖивыхПоВозрастнымГруппами, результаты);
        }

        public РезультатыВычислительногоЭксперимента ПодобратьПредположениеДляИнтерполяции()
        {
            int год = 2019;
            Территория территория = СписокТерриторий.First(o => o.Наименование == "Республика Башкортостан");
            КатегорияПоселения категорияПоселения = СписокКатегорийПоселения.First(o => o.Наименование == "Все население");
            Пол пол = СписокПолов.First(o => o.Наименование == "Мужчины");
            ПричинаСмерти причинаСмерти = СписокПричинСмерти.First(o => o.Наименование == "Все причины смерти");

            // Таблица смертности для однолетних возрастных групп
            var таблицаСмертности0 = ВычислитьДанныеДляТаблицыСмертности(EТипВозрастныхГрупп.Однолетние, год, территория, категорияПоселения, пол, причинаСмерти, string.Empty);
            // Таблица смертности для однолетних интерполированных возрастных групп (предположение о равномерном распределении смертей)
            var таблицаСмертности1 = ВычислитьДанныеДляТаблицыСмертности(EТипВозрастныхГрупп.ОднолетниеИнтерполированные, год, территория, категорияПоселения, пол, причинаСмерти, "О равномерном распределении смертей");
            // Таблица смертности для однолетних интерполированных возрастных групп (предположение постоянства интенсивности смерти)
            var таблицаСмертности2 = ВычислитьДанныеДляТаблицыСмертности(EТипВозрастныхГрупп.ОднолетниеИнтерполированные, год, территория, категорияПоселения, пол, причинаСмерти, "Постоянства интенсивности смерти");
            // Таблица смертности для однолетних интерполированных возрастных групп (предположение Балдуччи)
            var таблицаСмертности3 = ВычислитьДанныеДляТаблицыСмертности(EТипВозрастныхГрупп.ОднолетниеИнтерполированные, год, территория, категорияПоселения, пол, причинаСмерти, "Балдуччи");

            if (таблицаСмертности0 == null || таблицаСмертности1 == null || таблицаСмертности2 == null || таблицаСмертности3 == null)
                return null;

            List<int> списокДоступныхВозрастныхГрупп = таблицаСмертности0.Select(o => o.x).ToList();

            var списокСЧисломЖивыхПоВозрастнымГруппами = new List<ЧислоЖивыхДляВозрастнойГруппы_ПодборПредположенияДляИнтерполяции>();
            foreach (var x in списокДоступныхВозрастныхГрупп)
            {
                if (x > 85)
                    break;

                double lx0 = таблицаСмертности0.First(o => o.x == x).lx;
                double lx1 = таблицаСмертности1.First(o => o.x == x).lx;
                double lx2 = таблицаСмертности2.First(o => o.x == x).lx;
                double lx3 = таблицаСмертности3.First(o => o.x == x).lx;
                списокСЧисломЖивыхПоВозрастнымГруппами.Add(new ЧислоЖивыхДляВозрастнойГруппы_ПодборПредположенияДляИнтерполяции(x, lx0, lx1, lx2, lx3));
            }

            var результаты = string.Empty;
            double sum1 = 0;
            double sum2 = 0;
            double sum3 = 0;
            // Школьники
            for (var x = 6; x <= 17; x++)
            {
                double lx0 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx0;
                double lx1 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx1;
                double lx2 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx2;
                double lx3 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx3;

                sum1 += Math.Abs(lx1 - lx0);
                sum2 += Math.Abs(lx2 - lx0);
                sum3 += Math.Abs(lx3 - lx0);
            }
            результаты += "Возрастная группа 6-17 лет\r\n";
            результаты += "Сумма расстояний между точками для:\r\n";
            результаты += $"- предположения о равномерном распределении смертей: {sum1}\r\n";
            результаты += $"- предположения постоянства интенсивности смерти: {sum2}\r\n";
            результаты += $"- предположения Балдуччи: {sum3}\r\n";
            if (sum1 < sum2 && sum1 < sum3)
            {
                результаты += "Для возрастной группы 6-17 лет лучшим оказалось предположение о равномерном распределении смертей.\r\n";
            }
            else if (sum2 < sum1 && sum2 < sum3)
            {
                результаты += "Для возрастной группы 6-17 лет лучшим оказалось предположение постоянства интенсивности смерти.\r\n";
            }
            else if (sum3 < sum1 && sum3 < sum2)
            {
                результаты += "Для возрастной группы 6-17 лет лучшим оказалось предположение Балдуччи.\r\n";
            }
            else
            {
                результаты += "Для возрастной группы 6-17 лет все предположения показывают одинаковый результат.\r\n";
            }

            sum1 = 0;
            sum2 = 0;
            sum3 = 0;
            // Взрослые
            for (var x = 30; x <= 55; x++)
            {
                double lx0 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx0;
                double lx1 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx1;
                double lx2 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx2;
                double lx3 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx3;

                sum1 += Math.Abs(lx1 - lx0);
                sum2 += Math.Abs(lx2 - lx0);
                sum3 += Math.Abs(lx3 - lx0);
            }
            результаты += "Возрастная группа 30-55 лет\r\n";
            результаты += "Сумма расстояний между точками для:\r\n";
            результаты += $"- предположения о равномерном распределении смертей: {sum1}\r\n";
            результаты += $"- предположения постоянства интенсивности смерти: {sum2}\r\n";
            результаты += $"- предположения Балдуччи: {sum3}\r\n";
            if (sum1 < sum2 && sum1 < sum3)
            {
                результаты += "Для возрастной группы 30-55 лет лучшим оказалось предположение о равномерном распределении смертей.\r\n";
            }
            else if (sum2 < sum1 && sum2 < sum3)
            {
                результаты += "Для возрастной группы 30-55 лет лучшим оказалось предположение постоянства интенсивности смерти.\r\n";
            }
            else if (sum3 < sum1 && sum3 < sum2)
            {
                результаты += "Для возрастной группы 30-55 лет лучшим оказалось предположение Балдуччи.\r\n";
            }
            else
            {
                результаты += "Для возрастной группы 30-55 лет все предположения показывают одинаковый результат.\r\n";
            }

            sum1 = 0;
            sum2 = 0;
            sum3 = 0;
            // Пожилые
            for (var x = 55; x <= 80; x++)
            {
                double lx0 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx0;
                double lx1 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx1;
                double lx2 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx2;
                double lx3 = списокСЧисломЖивыхПоВозрастнымГруппами.First(o => o.x == x).lx3;

                sum1 += Math.Abs(lx1 - lx0);
                sum2 += Math.Abs(lx2 - lx0);
                sum3 += Math.Abs(lx3 - lx0);
            }
            результаты += "Возрастная группа 56-80 лет\r\n";
            результаты += "Сумма расстояний между точками для:\r\n";
            результаты += $"- предположения о равномерном распределении смертей: {sum1}\r\n";
            результаты += $"- предположения постоянства интенсивности смерти: {sum2}\r\n";
            результаты += $"- предположения Балдуччи: {sum3}\r\n";
            if (sum1 < sum2 && sum1 < sum3)
            {
                результаты += "Для возрастной группы 56-80 лет лучшим оказалось предположение о равномерном распределении смертей.\r\n";
            }
            else if (sum2 < sum1 && sum2 < sum3)
            {
                результаты += "Для возрастной группы 56-80 лет лучшим оказалось предположение постоянства интенсивности смерти.\r\n";
            }
            else if (sum3 < sum1 && sum3 < sum2)
            {
                результаты += "Для возрастной группы 56-80 лет лучшим оказалось предположение Балдуччи.\r\n";
            }
            else
            {
                результаты += "Для возрастной группы 56-80 лет все предположения показывают одинаковый результат.\r\n";
            }

            return new РезультатыВычислительногоЭксперимента(списокСЧисломЖивыхПоВозрастнымГруппами, результаты);
        }

        private void ОбработатьВходныеДанные(string[] данныеОЧисленностиНаселенияПоОднолетнимВозрастнымГруппам,
                                             string[] данныеОСмертностиПоОднолетнимВозрастнымГруппам,
                                             string[] данныеОЧисленностиНаселенияПоПятилетнимВозрастнымГруппам,
                                             string[] данныеОСмертностиПоПятилетнимВозрастнымГруппам,
                                             string[] переченьТерриторий,
                                             string[] переченьПричинСмерти)
        {
            _списокСДаннымиОЧисленностиНаселенияПоОднолетнимВозрастнымГруппам = new List<ЧисленностьНаселенияПоОднолетнимВозрастнымГруппам>();
            for (var i = 1; i < данныеОЧисленностиНаселенияПоОднолетнимВозрастнымГруппам.Length; i++)
            {
                string строкаСДанными = данныеОЧисленностиНаселенияПоОднолетнимВозрастнымГруппам[i];
                string[] данные = строкаСДанными.Split(',');
                if (данные.Length < 105)
                    continue;
                _списокСДаннымиОЧисленностиНаселенияПоОднолетнимВозрастнымГруппам.Add(new ЧисленностьНаселенияПоОднолетнимВозрастнымГруппам(данные));
            }

            _списокСДаннымиОСмертностиПоОднолетнимВозрастнымГруппам = new List<СмертностьПоОднолетнимВозрастнымГруппам>();
            for (var i = 1; i < данныеОСмертностиПоОднолетнимВозрастнымГруппам.Length; i++)
            {
                string строкаСДанными = данныеОСмертностиПоОднолетнимВозрастнымГруппам[i];
                string[] данные = строкаСДанными.Split(',');
                if (данные.Length < 105)
                    continue;
                _списокСДаннымиОСмертностиПоОднолетнимВозрастнымГруппам.Add(new СмертностьПоОднолетнимВозрастнымГруппам(данные));
            }

            _списокСДаннымиОЧисленностиНаселенияПоПятилетнимВозрастнымГруппам = new List<ЧисленностьНаселенияПоПятилетнимВозрастнымГруппам>();
            for (var i = 1; i < данныеОЧисленностиНаселенияПоПятилетнимВозрастнымГруппам.Length; i++)
            {
                string строкаСДанными = данныеОЧисленностиНаселенияПоПятилетнимВозрастнымГруппам[i];
                string[] данные = строкаСДанными.Split(',');
                if (данные.Length < 23)
                    continue;
                _списокСДаннымиОЧисленностиНаселенияПоПятилетнимВозрастнымГруппам.Add(new ЧисленностьНаселенияПоПятилетнимВозрастнымГруппам(данные));
            }

            _списокСДаннымиОСмертностиПоПятилетнимВозрастнымГруппам = new List<СмертностьПоПятилетнимВозрастнымГруппам>();
            for (var i = 1; i < данныеОСмертностиПоПятилетнимВозрастнымГруппам.Length; i++)
            {
                string строкаСДанными = данныеОСмертностиПоПятилетнимВозрастнымГруппам[i];
                string[] данные = строкаСДанными.Split(',');
                if (данные.Length < 25)
                    continue;
                _списокСДаннымиОСмертностиПоПятилетнимВозрастнымГруппам.Add(new СмертностьПоПятилетнимВозрастнымГруппам(данные));
            }

            СписокТерриторий = new List<Территория>();
            for (var i = 1; i < переченьТерриторий.Length; i++)
            {
                string строкаСДанными = переченьТерриторий[i];
                string[] данные = строкаСДанными.Split(',');
                if (данные.Length < 2)
                    continue;
                СписокТерриторий.Add(new Территория(данные));
            }

            СписокПричинСмерти = new List<ПричинаСмерти>();
            for (var i = 1; i < переченьПричинСмерти.Length; i++)
            {
                string строкаСДанными = переченьПричинСмерти[i];
                string[] данные = строкаСДанными.Split(';');
                if (данные.Length < 2)
                    continue;
                СписокПричинСмерти.Add(new ПричинаСмерти(данные));
            }
        }

        private void ЗаполнитьСписокГодов()
        {
            СписокГодов = new List<int>
            {
                 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019
            };
        }

        private void ЗаполнитьСписокКатегорийПоселения()
        {
            СписокКатегорийПоселения = new List<КатегорияПоселения>
            {
                new КатегорияПоселения("T", "Все население"),
                new КатегорияПоселения("U", "Городское население"),
                new КатегорияПоселения("R", "Сельское население")
            };
        }

        private void ЗаполнитьСписокПолов()
        {
            СписокПолов = new List<Пол>
            {
                new Пол("B", "Все"),
                new Пол("M", "Мужчины"),
                new Пол("F", "Женщины")
            };
        }

        private void ЗаполнитьСпискиВозрастныхГрупп()
        {
            СписокОднолетнихВозрастныхГрупп = new List<int>
            {
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, ПредельнаяВозрастнаяГруппа
            };

            СписокПятилетнихВозрастныхГрупп = new List<int>
            {
                0, 1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, ПредельнаяВозрастнаяГруппа
            };
        }

        private void ЗаполнитьСписокПредположенийДляИнтерполяции()
        {
            СписокПредположенийДляИнтерполяции = new List<string>
            {
                "О равномерном распределении смертей",
                "Постоянства интенсивности смерти",
                "Балдуччи"
            };
        }

        private ЧисленностьНаселения ПолучитьДанныеОЧисленностиНаселения(EТипВозрастныхГрупп типВозрастныхГрупп,
                                                                         int год,
                                                                         Территория территория,
                                                                         КатегорияПоселения категорияПоселения,
                                                                         Пол пол)
        {
            switch (типВозрастныхГрупп)
            {
                case EТипВозрастныхГрупп.Однолетние:
                    return _списокСДаннымиОЧисленностиНаселенияПоОднолетнимВозрастнымГруппам.Find(o => o.Year == год
                                                                                                       && o.Reg == территория.Код
                                                                                                       && string.Equals(o.Group, категорияПоселения.Код)
                                                                                                       && string.Equals(o.Sex, пол.Код));
                case EТипВозрастныхГрупп.ОднолетниеИнтерполированные:
                case EТипВозрастныхГрупп.Пятилетние:
                    return _списокСДаннымиОЧисленностиНаселенияПоПятилетнимВозрастнымГруппам.Find(o => o.Year == год
                                                                                                       && o.Reg == территория.Код
                                                                                                       && string.Equals(o.Group, категорияПоселения.Код)
                                                                                                       && string.Equals(o.Sex, пол.Код));
                default:
                    return null;
            }
        }

        private Смертность ПолучитьДанныеОСмертности(EТипВозрастныхГрупп типВозрастныхГрупп,
                                                     int год,
                                                     Территория территория,
                                                     КатегорияПоселения категорияПоселения,
                                                     Пол пол,
                                                     ПричинаСмерти причинаСмерти)
        {
            switch (типВозрастныхГрупп)
            {
                case EТипВозрастныхГрупп.Однолетние:
                    return _списокСДаннымиОСмертностиПоОднолетнимВозрастнымГруппам.Find(o => o.Year == год
                                                                                             && o.Reg == территория.Код
                                                                                             && string.Equals(o.Group, категорияПоселения.Код)
                                                                                             && string.Equals(o.Sex, пол.Код));
                case EТипВозрастныхГрупп.ОднолетниеИнтерполированные:
                case EТипВозрастныхГрупп.Пятилетние:
                    return _списокСДаннымиОСмертностиПоПятилетнимВозрастнымГруппам.Find(o => o.Year == год
                                                                                             && o.Reg == территория.Код
                                                                                             && string.Equals(o.Group, категорияПоселения.Код)
                                                                                             && string.Equals(o.Sex, пол.Код)
                                                                                             && o.Cause == причинаСмерти.Код);
                default:
                    return null;
            }
        }

        private List<ЧислоЖивыхДляВозрастнойГруппы> ВыполнитьИнтерполяциюЧислаЖивыхПоВозрастнымГруппам(List<ЧислоЖивыхДляВозрастнойГруппы> списокСЧисломЖивыхПоВозрастнымГруппам,
                                                                                                       string предположениеДляИнтерполяции)
        {
            switch (предположениеДляИнтерполяции)
            {
                case "О равномерном распределении смертей":
                    return ВыполнитьИнтерполяциюПоПредположениюОРавномерномРаспределенииСмертей(списокСЧисломЖивыхПоВозрастнымГруппам);
                case "Постоянства интенсивности смерти":
                    return ВыполнитьИнтерполяциюПоПредположениюПостоянстваИнтенсивностиСмерти(списокСЧисломЖивыхПоВозрастнымГруппам);
                case "Балдуччи":
                    return ВыполнитьИнтерполяциюПоПредположениюБалдуччи(списокСЧисломЖивыхПоВозрастнымГруппам);
                default:
                    return null;
            }
        }

        private List<ЧислоЖивыхДляВозрастнойГруппы> ВыполнитьИнтерполяциюПоПредположениюОРавномерномРаспределенииСмертей(List<ЧислоЖивыхДляВозрастнойГруппы> списокСЧисломЖивыхПоВозрастнымГруппам)
        {
            var интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам = new List<ЧислоЖивыхДляВозрастнойГруппы>();
            List<int> списокДоступныхВозрастныхГрупп = списокСЧисломЖивыхПоВозрастнымГруппам.Select(o => o.x).ToList();

            for (int i = 0; i < списокДоступныхВозрастныхГрупп.Count - 1; i++)
            {
                int x = списокДоступныхВозрастныхГрупп[i];
                int x_next = списокДоступныхВозрастныхГрупп[i + 1];
                double lx = списокСЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x).lx;
                double lx_next = списокСЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x_next).lx;

                double X = x_next - x; // Величина возрастной группы

                for (int t = 0; t <= X; t++)
                {
                    int x_interp = x + t;
                    double lx_interp = lx + (lx_next - lx) * (t / X);
                    lx_interp = Math.Round(lx_interp);
                    if (!интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам.Any(o => o.x == x_interp))
                        интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам.Add(new ЧислоЖивыхДляВозрастнойГруппы(x_interp, lx_interp));
                }
            }

            return интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам;
        }

        private List<ЧислоЖивыхДляВозрастнойГруппы> ВыполнитьИнтерполяциюПоПредположениюПостоянстваИнтенсивностиСмерти(List<ЧислоЖивыхДляВозрастнойГруппы> списокСЧисломЖивыхПоВозрастнымГруппам)
        {
            var интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам = new List<ЧислоЖивыхДляВозрастнойГруппы>();
            List<int> списокДоступныхВозрастныхГрупп = списокСЧисломЖивыхПоВозрастнымГруппам.Select(o => o.x).ToList();

            for (int i = 0; i < списокДоступныхВозрастныхГрупп.Count - 1; i++)
            {
                int x = списокДоступныхВозрастныхГрупп[i];
                int x_next = списокДоступныхВозрастныхГрупп[i + 1];
                double lx = списокСЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x).lx;
                double lx_next = списокСЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x_next).lx;

                double X = x_next - x; // Величина возрастной группы

                for (int t = 0; t <= X; t++)
                {
                    int x_interp = x + t;
                    double lx_interp = lx * Math.Pow(lx_next / lx, t / X);
                    lx_interp = Math.Round(lx_interp);
                    if (!интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам.Any(o => o.x == x_interp))
                        интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам.Add(new ЧислоЖивыхДляВозрастнойГруппы(x_interp, lx_interp));
                }
            }

            return интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам;
        }

        private List<ЧислоЖивыхДляВозрастнойГруппы> ВыполнитьИнтерполяциюПоПредположениюБалдуччи(List<ЧислоЖивыхДляВозрастнойГруппы> списокСЧисломЖивыхПоВозрастнымГруппам)
        {
            var интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам = new List<ЧислоЖивыхДляВозрастнойГруппы>();
            List<int> списокДоступныхВозрастныхГрупп = списокСЧисломЖивыхПоВозрастнымГруппам.Select(o => o.x).ToList();

            for (int i = 0; i < списокДоступныхВозрастныхГрупп.Count - 1; i++)
            {
                int x = списокДоступныхВозрастныхГрупп[i];
                int x_next = списокДоступныхВозрастныхГрупп[i + 1];
                double lx = списокСЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x).lx;
                double lx_next = списокСЧисломЖивыхПоВозрастнымГруппам.First(o => o.x == x_next).lx;

                double X = x_next - x; // Величина возрастной группы

                for (int t = 0; t <= X; t++)
                {
                    int x_interp = x + t;
                    double lx_interp = (5 * lx_next) / ((5 - t) * (lx_next / lx) + t);
                    lx_interp = Math.Round(lx_interp);
                    if (!интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам.Any(o => o.x == x_interp))
                        интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам.Add(new ЧислоЖивыхДляВозрастнойГруппы(x_interp, lx_interp));
                }
            }

            return интерполированныйСписокСЧисломЖивыхПоВозрастнымГруппам;
        }

        private void НормализоватьЧислоЖивыхПоВозрастнымГруппам(List<ЧислоЖивыхДляВозрастнойГруппы> списокСЧисломЖивыхПоВозрастнымГруппам)
        {
            double l0 = списокСЧисломЖивыхПоВозрастнымГруппам.OrderBy(o => o.x).First().lx;
            списокСЧисломЖивыхПоВозрастнымГруппам.ForEach(o => o.lx /= l0);
            списокСЧисломЖивыхПоВозрастнымГруппам.ForEach(o => o.lx = Math.Round(o.lx, 5));
            списокСЧисломЖивыхПоВозрастнымГруппам.ForEach(o => o.lx *= 100000);
            списокСЧисломЖивыхПоВозрастнымГруппам.ForEach(o => o.lx = Math.Round(o.lx)); // Выполняем дополнительное округление, чтобы избежать артефактов вычислений
        }
    }

    public enum EТипВозрастныхГрупп
    {
        Однолетние,
        ОднолетниеИнтерполированные,
        Пятилетние
    }
}
